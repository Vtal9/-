#include<fstream>
#include<vector>
#include<queue>
#include<limits.h>
#include<iostream>
#include<string>
#include<algorithm>

using namespace std;

struct IGraph {

	// Добавление ребра от from к to. 
	virtual void AddEdge(int from, int to, int weight) = 0;

	// Кол-во вершин 
	virtual int GetVerticesCount() const = 0;

	virtual void GetNextVertices(int vertex, std::vector<int>& vertices) const = 0;

	virtual int GetWeight(int from, int to) const = 0;

	virtual void GetPrevVertices(int vertex, std::vector<int>& vertices) const = 0;

};

class matrixGraph : public IGraph {
public:
	explicit matrixGraph(int N);

	virtual int GetWeight(int from, int to) const override;
	virtual void AddEdge(int form, int to, int weight) override;
	virtual int GetVerticesCount() const override;
	virtual void GetNextVertices(int vertex, std::vector<int>& nextVertices) const override;
	virtual void GetPrevVertices(int vertex, std::vector<int>& prevVertices) const override;
private:
	std::vector<std::vector<int>> edges;
};


int matrixGraph::GetWeight(int from, int to) const {
	return edges[from][to];
}



matrixGraph::matrixGraph(int N) {
	edges.resize(N);
	for (int i = 0; i < N; i++) {
		edges[i].assign(N, 0);
	}
}


void matrixGraph::AddEdge(int from, int to, int weight) {
	edges[from][to] = weight;
}


int matrixGraph::GetVerticesCount() const {
	return edges.size();
}



void matrixGraph::GetNextVertices(int vertex, std::vector<int>& nextVertices) const {
	nextVertices = edges[vertex];
}


void matrixGraph::GetPrevVertices(int vertex, std::vector<int>& prevVertices) const {
	for (int i = 0; i < edges.size(); i++) {
		if (edges[i][vertex]) {
			prevVertices.push_back(i);
		}
	}
}



bool BFS(const IGraph& graph, IGraph& DN, vector<int>& d) {
	d.assign(graph.GetVerticesCount(), INT_MAX);
	d[0] = 0;
	queue<int> Q;
	Q.push(0);
	while (!Q.empty()) {
		int u = Q.front();
		Q.pop();
		vector<int> nextVertices;
		graph.GetNextVertices(u, nextVertices);
		for (int i = 0; i < nextVertices.size(); i++) {
			if (nextVertices[i] != 0 && DN.GetWeight(u, i) > 0 && d[i] == INT_MAX) {
				d[i] = d[u] + 1;
				Q.push(i);
			}
		}
	}
	return d[1] != INT_MAX;
}


int DFS(int vertex, int minCapacity, vector<int>& d, const matrixGraph& graph, IGraph& DN, vector<int>& ptr) {
	if (vertex == 1 || minCapacity == 0) {
		return minCapacity;
	}
	for (int i = ptr[vertex]; i < ptr.size(); i++) {
		if (d[i] == d[vertex] + 1) {
			int delta = DFS(i, min(minCapacity, DN.GetWeight(vertex, i)), d, graph, DN, ptr);
			if (delta != 0) {
				DN.AddEdge(vertex, i, DN.GetWeight(vertex, i) - delta);
				DN.AddEdge(i, vertex, DN.GetWeight(i, vertex) - delta);
				return delta;
			}
		}
		ptr[vertex]++;
	}
	return 0;
}


int findMaxFlow(const matrixGraph& graph, IGraph& DN) {
	int maxFlow = 0;
	vector<int> d;
	while (BFS(graph, DN, d)) {
		vector<int> ptr(graph.GetVerticesCount(), 0);
		int  curFlow = DFS(0, INT_MAX, d, graph, DN, ptr);
		while (curFlow != 0) {
			maxFlow += curFlow;
			curFlow = DFS(0, INT_MAX, d, graph, DN, ptr);
		}
	}
	return maxFlow;
}


//функция считает коиличество ?, нумерует их и возвращает их количество
int createVertices(vector<int>& numbers, const string& str, const string& templ) {
	numbers.assign(str.length() + templ.length(), -1);
	int n = 0;//счетчик знаков ?
	for (int i = 0; i < str.length(); i++) {
		if (str[i] == '?') {
			numbers[i] = n;
			n++;
		}
	}
	for (int j = 0; j < templ.length(); j++) {
		if (templ[j] == '?') {
			numbers[j + str.length()] = n;
			n++;
		}
	}
	return n;
}


//функция создает граф для нахождение максимального потока
void buildGraph(const vector<int>& numbers, IGraph& graph, const string& str, const string& templ, int& hammingDist) {
	for (int i = 0; i < str.length() - templ.length() + 1; i++) {
		for (int j = 0; j < templ.length(); j++) {
			int v1;
			switch (str[i + j]) {
			case '0':
				switch (templ[j]) {
				case '1':
					hammingDist++;
					break;
				case '?':
					int v2 = 2 + numbers[str.length() + j];
					graph.AddEdge(0, v2, graph.GetWeight(0, v2) + 1);
					break;
				}
				break;
			case '1':
				switch (templ[j]) {
				case '0':
					hammingDist++;
					break;
				case '?':
					int v2 = 2 + numbers[str.length() + j];
					graph.AddEdge(v2, 1, graph.GetWeight(v2, 1) + 1);
					break;
				}
				break;
			case '?':
				v1 = 2 + numbers[i + j];
				switch (templ[j]) {
				case '0':
					graph.AddEdge(0, v1, graph.GetWeight(0, v1) + 1);
					break;
				case '1':
					graph.AddEdge(v1, 1, graph.GetWeight(v1, 1) + 1);
					break;
				case '?':
					int v2 = 2 + numbers[str.length() + j];
					graph.AddEdge(v1, v2, graph.GetWeight(v1, v2) + 1);
					graph.AddEdge(v2, v1, graph.GetWeight(v2, v1) + 1);
					break;
				}
				break;
			}
		}
	}
}


//функция заменяет "?"
void completeStrings(string& str, string& templ, const IGraph& graph, IGraph& destNet, const vector<int>& numbers) {
	vector<int> d(graph.GetVerticesCount(), INT_MAX);
	d[0] = 0;
	BFS(graph, destNet, d);
	for (int i = 0; i < numbers.size(); i++) {
		if (numbers[i] != -1) {
			if (d[numbers[i] + 2] == INT_MAX) {
				if (i < str.length()) {
					str[i] = '1';
				}
				else {
					templ[i - str.length()] = '1';
				}
			}
			else {
				if (i < str.length()) {
					str[i] = '0';
				}
				else {
					templ[i - str.length()] = '0';
				}
			}
		}
	}
}


int findHamming(string& str, string& templ) {
	vector<int> numbers;
	int n = createVertices(numbers, str, templ);

	matrixGraph graph(n + 2);
	int hammingDist = 0;
	buildGraph(numbers, graph, str, templ, hammingDist);

	matrixGraph destNet(graph);
	hammingDist += findMaxFlow(graph, destNet);

	completeStrings(str, templ, graph, destNet, numbers);

	return hammingDist;
}


int main()
{
	string str;
	cin >> str;
	string templ;
	cin >> templ;
	cout << findHamming(str, templ) << endl << str << endl << templ;
	return 0;
}

